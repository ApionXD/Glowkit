From 6f21bfb99e9489be5f13d078e83dc3ecd50a4b3a Mon Sep 17 00:00:00 2001
From: mastercoms <circuitsoft@tuta.io>
Date: Wed, 24 May 2017 09:16:55 -0400
Subject: [PATCH] Enhance plugin manager


diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 86cc5025..87476830 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -1,6 +1,8 @@
 package org.bukkit.plugin;
 
 import java.io.File;
+import java.net.URL;
+import java.util.Collection;
 import java.util.Set;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
@@ -89,6 +91,20 @@ public interface PluginManager {
     @NotNull
     public Plugin[] loadPlugins(@NotNull File directory);
 
+    /**
+     * Loads multiple plugins from a folder
+     *
+     * @param directory Directory containing the plugin files (for error messages)
+     * @param files Plugin files to load
+     * @return A list of all plugins loaded
+     */
+    @NotNull
+    Plugin[] loadPlugins(@NotNull String directory, @NotNull File... files);
+
+    void ignore(@NotNull URL url);
+
+    void ignore(@NotNull URL... urls);
+
     /**
      * Disables all the loaded plugins
      */
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 26685f59..2e5ba08e 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -8,8 +8,11 @@ import com.google.common.graph.MutableGraph;
 import java.io.File;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -60,6 +63,7 @@ public final class SimplePluginManager implements PluginManager {
     private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
     private boolean useTimings = false;
+    private Collection<URL> ignored = new ArrayList<>();
 
     public SimplePluginManager(@NotNull Server instance, @NotNull SimpleCommandMap commandMap) {
         server = instance;
@@ -118,13 +122,19 @@ public final class SimplePluginManager implements PluginManager {
         Validate.notNull(directory, "Directory cannot be null");
         Validate.isTrue(directory.isDirectory(), "Directory must be a directory");
 
-        List<Plugin> result = new ArrayList<Plugin>();
-        Set<Pattern> filters = fileAssociations.keySet();
-
         if (!(server.getUpdateFolder().equals(""))) {
             updateDirectory = new File(directory, server.getUpdateFolder());
         }
 
+        return loadPlugins(directory.getPath(), directory.listFiles());
+    }
+
+    @Override
+    @NotNull
+    public Plugin[] loadPlugins(@NotNull String directory, @NotNull File... files) {
+        List<Plugin> result = new ArrayList<>();
+        Set<Pattern> filters = fileAssociations.keySet();
+
         Map<String, File> plugins = new HashMap<String, File>();
         Set<String> loadedPlugins = new HashSet<String>();
         Map<String, String> pluginsProvided = new HashMap<>();
@@ -132,7 +142,14 @@ public final class SimplePluginManager implements PluginManager {
         Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
 
         // This is where it figures out all possible plugins
-        for (File file : directory.listFiles()) {
+        for (File file : files) {
+            try {
+                if (ignored.contains(file.toURI().toURL())) {
+                    continue;
+                }
+            } catch (MalformedURLException ignore) {
+            }
+
             PluginLoader loader = null;
             for (Pattern filter : filters) {
                 Matcher match = filter.matcher(file.getName());
@@ -148,14 +165,14 @@ public final class SimplePluginManager implements PluginManager {
                 description = loader.getPluginDescription(file);
                 String name = description.getName();
                 if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
-                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': Restricted Name");
+                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "': Restricted Name");
                     continue;
                 } else if (description.rawName.indexOf(' ') != -1) {
-                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': uses the space-character (0x20) in its name");
+                    server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "': uses the space-character (0x20) in its name");
                     continue;
                 }
             } catch (InvalidDescriptionException ex) {
-                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "'", ex);
                 continue;
             }
 
@@ -166,7 +183,7 @@ public final class SimplePluginManager implements PluginManager {
                     description.getName(),
                     file.getPath(),
                     replacedFile.getPath(),
-                    directory.getPath()
+                    directory
                 ));
             }
 
@@ -187,7 +204,7 @@ public final class SimplePluginManager implements PluginManager {
                             file.getPath(),
                             provided,
                             pluginFile.getPath(),
-                            directory.getPath()
+                            directory
                     ));
                 } else {
                     String replacedPlugin = pluginsProvided.put(provided, description.getName());
@@ -269,7 +286,7 @@ public final class SimplePluginManager implements PluginManager {
 
                             server.getLogger().log(
                                 Level.SEVERE,
-                                "Could not load '" + entry.getValue().getPath() + "' in folder '" + directory.getPath() + "'",
+                                "Could not load '" + entry.getValue().getPath() + "' in folder '" + directory + "'",
                                 new UnknownDependencyException("Unknown dependency " + dependency + ". Please download and install " + dependency + " to run this plugin."));
                             break;
                         }
@@ -308,11 +325,11 @@ public final class SimplePluginManager implements PluginManager {
                             loadedPlugins.add(loadedPlugin.getName());
                             loadedPlugins.addAll(loadedPlugin.getDescription().getProvides());
                         } else {
-                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'");
+                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "'");
                         }
                         continue;
                     } catch (InvalidPluginException ex) {
-                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "'", ex);
                     }
                 }
             }
@@ -339,11 +356,11 @@ public final class SimplePluginManager implements PluginManager {
                                 loadedPlugins.add(loadedPlugin.getName());
                                 loadedPlugins.addAll(loadedPlugin.getDescription().getProvides());
                             } else {
-                                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'");
+                                server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "'");
                             }
                             break;
                         } catch (InvalidPluginException ex) {
-                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
+                            server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "'", ex);
                         }
                     }
                 }
@@ -356,7 +373,7 @@ public final class SimplePluginManager implements PluginManager {
                     while (failedPluginIterator.hasNext()) {
                         File file = failedPluginIterator.next();
                         failedPluginIterator.remove();
-                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': circular dependency detected");
+                        server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory + "': circular dependency detected");
                     }
                 }
             }
@@ -365,6 +382,16 @@ public final class SimplePluginManager implements PluginManager {
         return result.toArray(new Plugin[result.size()]);
     }
 
+    @Override
+    public void ignore(@NotNull URL url) {
+        ignored.add(url);
+    }
+
+    @Override
+    public void ignore(@NotNull URL... urls) {
+        Collections.addAll(ignored, urls);
+    }
+
     /**
      * Loads the plugin in the specified file
      * <p>
-- 
2.26.2

