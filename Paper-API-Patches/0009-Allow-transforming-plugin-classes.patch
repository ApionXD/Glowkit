From 58c9dc8dcf0ae5d64356b6033e9470074f41fa47 Mon Sep 17 00:00:00 2001
From: aki_ks <aki@kaysubs.de>
Date: Tue, 3 Jul 2018 18:09:25 +0200
Subject: [PATCH] Allow transforming plugin classes


diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index e91cb2c7..c5cb0c79 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -49,7 +49,7 @@ import org.yaml.snakeyaml.error.YAMLException;
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
-public final class JavaPluginLoader implements PluginLoader {
+public class JavaPluginLoader implements PluginLoader {
     final Server server;
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
@@ -131,7 +131,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
         final PluginClassLoader loader;
         try {
-            loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file);
+            loader = newPluginLoader(this, getClass().getClassLoader(), description, dataFolder, file);
         } catch (InvalidPluginException ex) {
             throw ex;
         } catch (Throwable ex) {
@@ -143,6 +143,10 @@ public final class JavaPluginLoader implements PluginLoader {
         return loader.plugin;
     }
 
+    protected PluginClassLoader newPluginLoader(JavaPluginLoader loader, ClassLoader parent, PluginDescriptionFile description, File dataFolder, File file) throws Exception {
+        return new PluginClassLoader(loader, parent, description, dataFolder, file);
+    }
+
     @NotNull
     public PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
         Validate.notNull(file, "File cannot be null");
@@ -188,7 +192,7 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Nullable
-    Class<?> getClassByName(final String name) {
+    protected Class<?> getClassByName(final String name) {
         Class<?> cachedClass = classes.get(name);
 
         if (cachedClass != null) {
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 0df1926f..205f8da1 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
  */
-public final class PluginClassLoader extends URLClassLoader { // Spigot
+public class PluginClassLoader extends URLClassLoader { // Spigot
     public JavaPlugin getPlugin() { return plugin; } // Spigot
     private final JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
@@ -44,7 +44,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         ClassLoader.registerAsParallelCapable();
     }
 
-    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file) throws IOException, InvalidPluginException, MalformedURLException {
+    public PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file) throws IOException, InvalidPluginException, MalformedURLException {
         super(new URL[] {file.toURI().toURL()}, parent);
         Validate.notNull(loader, "Loader cannot be null");
 
@@ -133,6 +133,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                     CodeSigner[] signers = entry.getCodeSigners();
                     CodeSource source = new CodeSource(url, signers);
 
+                    classBytes = transformBytecode(classBytes);
                     result = defineClass(name, classBytes, 0, classBytes.length, source);
                 }
 
@@ -151,6 +152,10 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         return result;
     }
 
+    protected byte[] transformBytecode(byte[] bytecode) {
+        return bytecode;
+    }
+
     @Override
     public void close() throws IOException {
         try {
-- 
2.21.0

