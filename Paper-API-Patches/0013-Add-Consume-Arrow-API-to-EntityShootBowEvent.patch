From ef17c362d7bfcaf76d4e8643d6586a6df1b7c31f Mon Sep 17 00:00:00 2001
From: Mystiflow <mystiflow@gmail.com>
Date: Fri, 28 Feb 2020 15:30:45 -0500
Subject: [PATCH] Add Consume Arrow API to EntityShootBowEvent


diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 37dbc12e..191b34aa 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -21,12 +21,6 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     // Paper start
     private boolean consumeArrow = true;
     private final ItemStack arrowItem;
-    public void setConsumeArrow(boolean consumeArrow) {
-        this.consumeArrow = consumeArrow;
-    }
-    public boolean getConsumeArrow() {
-        return consumeArrow;
-    }
 
     @NotNull
     public ItemStack getArrowItem() {
@@ -39,12 +33,17 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     }
 
     public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull ItemStack arrowItem, @NotNull final Entity projectile, final float force) {
+        this(shooter, bow, arrowItem, projectile, force, true);
+    }
+
+    public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull ItemStack arrowItem, @NotNull final Entity projectile, final float force, final boolean consumeArrow) {
         super(shooter);
         this.arrowItem = arrowItem;
         // Paper end
         this.bow = bow;
         this.projectile = projectile;
         this.force = force;
+        this.consumeArrow = consumeArrow;
     }
 
     @NotNull
@@ -91,6 +90,24 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
         return force;
     }
 
+    /**
+     * Gets if an arrow will be consumed if arrow is fired
+     *
+     * @return state of arrow consumption
+     */
+    public boolean getConsumeArrow() {
+         return consumeArrow;
+    }
+
+    /**
+     * Sets if an arrow will be consumed if arrow is fired
+     *
+     * @param consumeArrow state of arrow consumption to set
+     */
+    public void setConsumeArrow(boolean consumeArrow) {
+        this.consumeArrow = consumeArrow;
+    }
+
     @Override
     public boolean isCancelled() {
         return cancelled;
-- 
2.24.1

